import {
  ApiOperation,
  ApiResponse,
  ApiQuery,
  ApiParam,
  ApiHeader,
} from '@nestjs/swagger';

const transactionResponseSchema = {
  type: 'object',
  properties: {
    transactions: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          transactionHash: {
            type: 'string',
            example:
              '0xfc2b3b6db38a51db3b9cb95de29b719de8deb99630626e4b4b99df056ffb7f2e',
            description: 'The hex encoded transaction hash',
          },
          transactionStatus: {
            type: 'number',
            example: 1,
            description:
              'The status of the transaction (1 for success, 0 for failure)',
          },
          blockHash: {
            type: 'string',
            example:
              '0x20c16f757d1fecd1ca00006cb5e10b541b04c70ad0ab3c4cd444f4cd9a0d437b',
            description: 'The hex encoding of the hash of the block',
          },
          blockNumber: {
            type: 'number',
            example: 4553069,
            description: 'The number of the block',
          },
          from: {
            type: 'string',
            example: '0x68ad60cc5e8f3b7cc53beab321cf0e6036962dbc',
            description: 'The ethereum address of the transaction sender',
          },
          to: {
            type: 'string',
            example: null,
            description:
              'The ethereum address of the transaction receiver or null for contract creation',
          },
          contractAddress: {
            type: 'string',
            example: null,
            description:
              'The ethereum address of the newly created contract if this is a contract creation transaction',
          },
          logsCount: {
            type: 'number',
            example: 1,
            description: 'Number of log objects generated by this transaction',
          },
          input: {
            type: 'string',
            example:
              '0x60e060405260008054600160a81b600160e81b031916650a8c0000007d60aa1b179055...',
            description:
              'The hex encoding of the data sent along with the transaction',
          },
          value: {
            type: 'string',
            example: '0',
            description: 'The value transferred in wei',
          },
        },
      },
    },
  },
};

// GET /lime/eth?transactionHashes
export const getTransactionsByHashesOperation = ApiOperation({
  summary: 'Get transactions by hashes',
  description:
    'Fetches transaction details for the provided transaction hashes',
});

export const getTransactionsByHashesQuery = ApiQuery({
  name: 'transactionHashes',
  type: 'string',
  required: true,
  description:
    'Transaction hash(es) to fetch. Can be a single hash or a JSON array of hashes',
  example:
    '["0xfc2b3b6db38a51db3b9cb95de29b719de8deb99630626e4b4b99df056ffb7f2e"]',
  schema: {
    oneOf: [
      {
        type: 'string',
        example:
          '0xfc2b3b6db38a51db3b9cb95de29b719de8deb99630626e4b4b99df056ffb7f2e',
      },
      {
        type: 'array',
        items: {
          type: 'string',
        },
        example: [
          '0xfc2b3b6db38a51db3b9cb95de29b719de8deb99630626e4b4b99df056ffb7f2e',
        ],
      },
    ],
  },
});

export const getTransactionsByHashesResponse = ApiResponse({
  status: 200,
  description: 'Successfully retrieved transactions',
  schema: transactionResponseSchema,
});

export const getTransactionsByHashesResponse400 = ApiResponse({
  status: 400,
  description: 'Invalid transaction hash format',
  schema: {
    type: 'object',
    properties: {
      statusCode: { type: 'number', example: 400 },
      message: { type: 'string', example: 'Invalid transaction hash format' },
    },
  },
});

export const getTransactionsByHashesResponse500 = ApiResponse({
  status: 500,
  description: 'Internal server error',
  schema: {
    type: 'object',
    properties: {
      statusCode: { type: 'number', example: 500 },
      message: {
        type: 'string',
        example: 'Failed to fetch transactions from blockchain',
      },
    },
  },
});

// GET /lime/eth/:rlphex
export const getTransactionsByRlpOperation = ApiOperation({
  summary: 'Get transactions by RLP encoded hashes',
  description:
    'Fetches transaction details for the provided RLP encoded transaction hashes',
});

export const getTransactionsByRlpParam = ApiParam({
  name: 'rlphex',
  type: 'string',
  required: true,
  description:
    'Hexadecimal representation of RLP encoded list of transaction hashes',
  example:
    'f90110b842307866633262336236646233386135316462336239636239356465323962373139646538646562393936333036323665346234623939646630353666666237663265...',
});

export const getTransactionsByRlpResponse = ApiResponse({
  status: 200,
  description: 'Successfully retrieved transactions',
  schema: transactionResponseSchema,
});

export const getTransactionsByRlpResponse400 = ApiResponse({
  status: 400,
  description: 'Invalid RLP format',
  schema: {
    type: 'object',
    properties: {
      statusCode: { type: 'number', example: 400 },
      message: { type: 'string', example: 'Invalid RLP hex string' },
    },
  },
});

export const getTransactionsByRlpResponse500 = ApiResponse({
  status: 500,
  description: 'Internal server error',
  schema: {
    type: 'object',
    properties: {
      statusCode: { type: 'number', example: 500 },
      message: { type: 'string', example: 'Failed to decode RLP data' },
    },
  },
});

// Optional JWT header for both endpoints
export const jwtHeader = ApiHeader({
  name: 'AUTH_TOKEN',
  description: 'JWT token for user authentication (optional)',
  required: false,
});
